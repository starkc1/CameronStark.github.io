Big-O Notation
    f(n) <= c*g(n) for all n >= N

Search Space:

    n, n/2, n/4, n/8,... 1
    n/2^0, n/2^1, n/2^2, n/2^3,... n/2^(m-1)

    n/2^(m-1) = 1
    n = 2^(m-1)
    log2(n) = m - 1
    m = log2(n) + 1
    O(log2(n))

EXAMPLE

public void method1()
{
    for (int i = 0; i < 10000; i++)
    {
        System.out.println(i);
    }
}
    inner:
        from i = 0 to 9,999 of (3 ) + 2
        3(10000) + 2
        30002 = O(1)


EXAMPLE

public in method2(int[] anArray)
{
    int val = 0;
    for (int i = 0; i < anArray.length; i++)
    {
        for (int j = 0; j < anArray.length; J++)
        {
            val = anArray[i]*anArray[j];
        }
    }
    return val;
}
    inner:
    j=i SUM n-1 of (4 ) + 2
    j=0 SUM n-1 of (4) - j=0 SUM i-1 of (4+2)
    4n - 4i + 2

    outer:
    i=0 SUM n-1 of (4n - 4i + 4) + 4
    4n^2 - 4((n-1 * n) / 2) + 4n + 4
    4n^2 - 2n^2 + 6n + 4

    O(n^2)

EXAMPLE

public in method2(int[] anArray)
{
    int val = 0;
    for (int i = 0; i < anArray.length; i*=2
    {
        for (int j = 0; j < anArray.length; J++)
        {
            val = anArray[i]*anArray[j];
        }
    }
    return val;
}

    inner:
    j=0 SUM n-1 of (4 ) + 2
    4n + 2

    outer:
    1, 2, 4, 8,...2^(m-1), 2^(m)
    2^(m-1) == length (n)
    2^(m-1) = n
    m-1 = log2(n)
    m = log2(n+1)

    m(4n+2+2) + 3
    (log2(n+1))(4n+4)+3
    O(nlog2(n))

Big-Omega Complexity
    Lower Bound
    f(n) >= c*g(n) for all n>=N

Big-Theta Complexity
    Tight Bound
    c1*g(n) <= f(n) <= c2*g(n)

EXAMPLE

    Given:
        f(n) = c
    Show:
        f(n) <= c'g(n) for n > N
        
        f(n) <= c'g(n)
        c <= c'(1)
        left c' = c 
        c <= c holds n>0

EXAMPLE

    f(n) = n^2 + 2n + 10 show f(n) = O(n^2)

    n^2 + 2n = 10 <= C * n^2
    N = 1
    13 <= C * 1
    for N >= 1 and C = 13 the big-O holds f(n) = O(n^2)